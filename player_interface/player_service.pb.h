// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player_service.proto

#ifndef PROTOBUF_INCLUDED_player_5fservice_2eproto
#define PROTOBUF_INCLUDED_player_5fservice_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_player_5fservice_2eproto 

namespace protobuf_player_5fservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_player_5fservice_2eproto
namespace player_service {
class PlaybackControlRequest;
class PlaybackControlRequestDefaultTypeInternal;
extern PlaybackControlRequestDefaultTypeInternal _PlaybackControlRequest_default_instance_;
class PlaybackControlResponse;
class PlaybackControlResponseDefaultTypeInternal;
extern PlaybackControlResponseDefaultTypeInternal _PlaybackControlResponse_default_instance_;
class PlayerPropertiesRequest;
class PlayerPropertiesRequestDefaultTypeInternal;
extern PlayerPropertiesRequestDefaultTypeInternal _PlayerPropertiesRequest_default_instance_;
class PlayerPropertiesResponse;
class PlayerPropertiesResponseDefaultTypeInternal;
extern PlayerPropertiesResponseDefaultTypeInternal _PlayerPropertiesResponse_default_instance_;
class PushToPlaylistRequest;
class PushToPlaylistRequestDefaultTypeInternal;
extern PushToPlaylistRequestDefaultTypeInternal _PushToPlaylistRequest_default_instance_;
class PushToPlaylistResponse;
class PushToPlaylistResponseDefaultTypeInternal;
extern PushToPlaylistResponseDefaultTypeInternal _PushToPlaylistResponse_default_instance_;
class ResetRequest;
class ResetRequestDefaultTypeInternal;
extern ResetRequestDefaultTypeInternal _ResetRequest_default_instance_;
class ResetResponse;
class ResetResponseDefaultTypeInternal;
extern ResetResponseDefaultTypeInternal _ResetResponse_default_instance_;
}  // namespace player_service
namespace google {
namespace protobuf {
template<> ::player_service::PlaybackControlRequest* Arena::CreateMaybeMessage<::player_service::PlaybackControlRequest>(Arena*);
template<> ::player_service::PlaybackControlResponse* Arena::CreateMaybeMessage<::player_service::PlaybackControlResponse>(Arena*);
template<> ::player_service::PlayerPropertiesRequest* Arena::CreateMaybeMessage<::player_service::PlayerPropertiesRequest>(Arena*);
template<> ::player_service::PlayerPropertiesResponse* Arena::CreateMaybeMessage<::player_service::PlayerPropertiesResponse>(Arena*);
template<> ::player_service::PushToPlaylistRequest* Arena::CreateMaybeMessage<::player_service::PushToPlaylistRequest>(Arena*);
template<> ::player_service::PushToPlaylistResponse* Arena::CreateMaybeMessage<::player_service::PushToPlaylistResponse>(Arena*);
template<> ::player_service::ResetRequest* Arena::CreateMaybeMessage<::player_service::ResetRequest>(Arena*);
template<> ::player_service::ResetResponse* Arena::CreateMaybeMessage<::player_service::ResetResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace player_service {

enum PlaybackControlRequest_ControlType {
  PlaybackControlRequest_ControlType_PLAY = 0,
  PlaybackControlRequest_ControlType_STOP = 1,
  PlaybackControlRequest_ControlType_PAUSE = 2,
  PlaybackControlRequest_ControlType_VOLUME = 3
};
bool PlaybackControlRequest_ControlType_IsValid(int value);
const PlaybackControlRequest_ControlType PlaybackControlRequest_ControlType_ControlType_MIN = PlaybackControlRequest_ControlType_PLAY;
const PlaybackControlRequest_ControlType PlaybackControlRequest_ControlType_ControlType_MAX = PlaybackControlRequest_ControlType_VOLUME;
const int PlaybackControlRequest_ControlType_ControlType_ARRAYSIZE = PlaybackControlRequest_ControlType_ControlType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlaybackControlRequest_ControlType_descriptor();
inline const ::std::string& PlaybackControlRequest_ControlType_Name(PlaybackControlRequest_ControlType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlaybackControlRequest_ControlType_descriptor(), value);
}
inline bool PlaybackControlRequest_ControlType_Parse(
    const ::std::string& name, PlaybackControlRequest_ControlType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlaybackControlRequest_ControlType>(
    PlaybackControlRequest_ControlType_descriptor(), name, value);
}
// ===================================================================

class PlayerPropertiesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:player_service.PlayerPropertiesRequest) */ {
 public:
  PlayerPropertiesRequest();
  virtual ~PlayerPropertiesRequest();

  PlayerPropertiesRequest(const PlayerPropertiesRequest& from);

  inline PlayerPropertiesRequest& operator=(const PlayerPropertiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerPropertiesRequest(PlayerPropertiesRequest&& from) noexcept
    : PlayerPropertiesRequest() {
    *this = ::std::move(from);
  }

  inline PlayerPropertiesRequest& operator=(PlayerPropertiesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerPropertiesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerPropertiesRequest* internal_default_instance() {
    return reinterpret_cast<const PlayerPropertiesRequest*>(
               &_PlayerPropertiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PlayerPropertiesRequest* other);
  friend void swap(PlayerPropertiesRequest& a, PlayerPropertiesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerPropertiesRequest* New() const final {
    return CreateMaybeMessage<PlayerPropertiesRequest>(NULL);
  }

  PlayerPropertiesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerPropertiesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerPropertiesRequest& from);
  void MergeFrom(const PlayerPropertiesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerPropertiesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:player_service.PlayerPropertiesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerPropertiesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:player_service.PlayerPropertiesResponse) */ {
 public:
  PlayerPropertiesResponse();
  virtual ~PlayerPropertiesResponse();

  PlayerPropertiesResponse(const PlayerPropertiesResponse& from);

  inline PlayerPropertiesResponse& operator=(const PlayerPropertiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerPropertiesResponse(PlayerPropertiesResponse&& from) noexcept
    : PlayerPropertiesResponse() {
    *this = ::std::move(from);
  }

  inline PlayerPropertiesResponse& operator=(PlayerPropertiesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerPropertiesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerPropertiesResponse* internal_default_instance() {
    return reinterpret_cast<const PlayerPropertiesResponse*>(
               &_PlayerPropertiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PlayerPropertiesResponse* other);
  friend void swap(PlayerPropertiesResponse& a, PlayerPropertiesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerPropertiesResponse* New() const final {
    return CreateMaybeMessage<PlayerPropertiesResponse>(NULL);
  }

  PlayerPropertiesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerPropertiesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerPropertiesResponse& from);
  void MergeFrom(const PlayerPropertiesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerPropertiesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string supported_file_types = 1;
  int supported_file_types_size() const;
  void clear_supported_file_types();
  static const int kSupportedFileTypesFieldNumber = 1;
  const ::std::string& supported_file_types(int index) const;
  ::std::string* mutable_supported_file_types(int index);
  void set_supported_file_types(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_supported_file_types(int index, ::std::string&& value);
  #endif
  void set_supported_file_types(int index, const char* value);
  void set_supported_file_types(int index, const char* value, size_t size);
  ::std::string* add_supported_file_types();
  void add_supported_file_types(const ::std::string& value);
  #if LANG_CXX11
  void add_supported_file_types(::std::string&& value);
  #endif
  void add_supported_file_types(const char* value);
  void add_supported_file_types(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& supported_file_types() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_supported_file_types();

  // required string player_name = 2;
  bool has_player_name() const;
  void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  const ::std::string& player_name() const;
  void set_player_name(const ::std::string& value);
  #if LANG_CXX11
  void set_player_name(::std::string&& value);
  #endif
  void set_player_name(const char* value);
  void set_player_name(const char* value, size_t size);
  ::std::string* mutable_player_name();
  ::std::string* release_player_name();
  void set_allocated_player_name(::std::string* player_name);

  // required string player_description = 3;
  bool has_player_description() const;
  void clear_player_description();
  static const int kPlayerDescriptionFieldNumber = 3;
  const ::std::string& player_description() const;
  void set_player_description(const ::std::string& value);
  #if LANG_CXX11
  void set_player_description(::std::string&& value);
  #endif
  void set_player_description(const char* value);
  void set_player_description(const char* value, size_t size);
  ::std::string* mutable_player_description();
  ::std::string* release_player_description();
  void set_allocated_player_description(::std::string* player_description);

  // @@protoc_insertion_point(class_scope:player_service.PlayerPropertiesResponse)
 private:
  void set_has_player_name();
  void clear_has_player_name();
  void set_has_player_description();
  void clear_has_player_description();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> supported_file_types_;
  ::google::protobuf::internal::ArenaStringPtr player_name_;
  ::google::protobuf::internal::ArenaStringPtr player_description_;
  friend struct ::protobuf_player_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:player_service.ResetRequest) */ {
 public:
  ResetRequest();
  virtual ~ResetRequest();

  ResetRequest(const ResetRequest& from);

  inline ResetRequest& operator=(const ResetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResetRequest(ResetRequest&& from) noexcept
    : ResetRequest() {
    *this = ::std::move(from);
  }

  inline ResetRequest& operator=(ResetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetRequest* internal_default_instance() {
    return reinterpret_cast<const ResetRequest*>(
               &_ResetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ResetRequest* other);
  friend void swap(ResetRequest& a, ResetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResetRequest* New() const final {
    return CreateMaybeMessage<ResetRequest>(NULL);
  }

  ResetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResetRequest& from);
  void MergeFrom(const ResetRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:player_service.ResetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:player_service.ResetResponse) */ {
 public:
  ResetResponse();
  virtual ~ResetResponse();

  ResetResponse(const ResetResponse& from);

  inline ResetResponse& operator=(const ResetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResetResponse(ResetResponse&& from) noexcept
    : ResetResponse() {
    *this = ::std::move(from);
  }

  inline ResetResponse& operator=(ResetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetResponse* internal_default_instance() {
    return reinterpret_cast<const ResetResponse*>(
               &_ResetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ResetResponse* other);
  friend void swap(ResetResponse& a, ResetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResetResponse* New() const final {
    return CreateMaybeMessage<ResetResponse>(NULL);
  }

  ResetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResetResponse& from);
  void MergeFrom(const ResetResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string error_message = 1;
  bool has_error_message() const;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 1;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // required int32 error_code = 2;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:player_service.ResetResponse)
 private:
  void set_has_error_message();
  void clear_has_error_message();
  void set_has_error_code();
  void clear_has_error_code();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::google::protobuf::int32 error_code_;
  friend struct ::protobuf_player_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PushToPlaylistRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:player_service.PushToPlaylistRequest) */ {
 public:
  PushToPlaylistRequest();
  virtual ~PushToPlaylistRequest();

  PushToPlaylistRequest(const PushToPlaylistRequest& from);

  inline PushToPlaylistRequest& operator=(const PushToPlaylistRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PushToPlaylistRequest(PushToPlaylistRequest&& from) noexcept
    : PushToPlaylistRequest() {
    *this = ::std::move(from);
  }

  inline PushToPlaylistRequest& operator=(PushToPlaylistRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushToPlaylistRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushToPlaylistRequest* internal_default_instance() {
    return reinterpret_cast<const PushToPlaylistRequest*>(
               &_PushToPlaylistRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PushToPlaylistRequest* other);
  friend void swap(PushToPlaylistRequest& a, PushToPlaylistRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PushToPlaylistRequest* New() const final {
    return CreateMaybeMessage<PushToPlaylistRequest>(NULL);
  }

  PushToPlaylistRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PushToPlaylistRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PushToPlaylistRequest& from);
  void MergeFrom(const PushToPlaylistRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushToPlaylistRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string file_type = 1;
  bool has_file_type() const;
  void clear_file_type();
  static const int kFileTypeFieldNumber = 1;
  const ::std::string& file_type() const;
  void set_file_type(const ::std::string& value);
  #if LANG_CXX11
  void set_file_type(::std::string&& value);
  #endif
  void set_file_type(const char* value);
  void set_file_type(const char* value, size_t size);
  ::std::string* mutable_file_type();
  ::std::string* release_file_type();
  void set_allocated_file_type(::std::string* file_type);

  // required string original_path = 2;
  bool has_original_path() const;
  void clear_original_path();
  static const int kOriginalPathFieldNumber = 2;
  const ::std::string& original_path() const;
  void set_original_path(const ::std::string& value);
  #if LANG_CXX11
  void set_original_path(::std::string&& value);
  #endif
  void set_original_path(const char* value);
  void set_original_path(const char* value, size_t size);
  ::std::string* mutable_original_path();
  ::std::string* release_original_path();
  void set_allocated_original_path(::std::string* original_path);

  // required bytes file_data = 4;
  bool has_file_data() const;
  void clear_file_data();
  static const int kFileDataFieldNumber = 4;
  const ::std::string& file_data() const;
  void set_file_data(const ::std::string& value);
  #if LANG_CXX11
  void set_file_data(::std::string&& value);
  #endif
  void set_file_data(const char* value);
  void set_file_data(const void* value, size_t size);
  ::std::string* mutable_file_data();
  ::std::string* release_file_data();
  void set_allocated_file_data(::std::string* file_data);

  // required int32 push_to_index = 3;
  bool has_push_to_index() const;
  void clear_push_to_index();
  static const int kPushToIndexFieldNumber = 3;
  ::google::protobuf::int32 push_to_index() const;
  void set_push_to_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:player_service.PushToPlaylistRequest)
 private:
  void set_has_file_type();
  void clear_has_file_type();
  void set_has_original_path();
  void clear_has_original_path();
  void set_has_push_to_index();
  void clear_has_push_to_index();
  void set_has_file_data();
  void clear_has_file_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_type_;
  ::google::protobuf::internal::ArenaStringPtr original_path_;
  ::google::protobuf::internal::ArenaStringPtr file_data_;
  ::google::protobuf::int32 push_to_index_;
  friend struct ::protobuf_player_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PushToPlaylistResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:player_service.PushToPlaylistResponse) */ {
 public:
  PushToPlaylistResponse();
  virtual ~PushToPlaylistResponse();

  PushToPlaylistResponse(const PushToPlaylistResponse& from);

  inline PushToPlaylistResponse& operator=(const PushToPlaylistResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PushToPlaylistResponse(PushToPlaylistResponse&& from) noexcept
    : PushToPlaylistResponse() {
    *this = ::std::move(from);
  }

  inline PushToPlaylistResponse& operator=(PushToPlaylistResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushToPlaylistResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushToPlaylistResponse* internal_default_instance() {
    return reinterpret_cast<const PushToPlaylistResponse*>(
               &_PushToPlaylistResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PushToPlaylistResponse* other);
  friend void swap(PushToPlaylistResponse& a, PushToPlaylistResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PushToPlaylistResponse* New() const final {
    return CreateMaybeMessage<PushToPlaylistResponse>(NULL);
  }

  PushToPlaylistResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PushToPlaylistResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PushToPlaylistResponse& from);
  void MergeFrom(const PushToPlaylistResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushToPlaylistResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string error_message = 1;
  bool has_error_message() const;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 1;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // required int32 error_code = 2;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // optional int32 playlist_index = 3;
  bool has_playlist_index() const;
  void clear_playlist_index();
  static const int kPlaylistIndexFieldNumber = 3;
  ::google::protobuf::int32 playlist_index() const;
  void set_playlist_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:player_service.PushToPlaylistResponse)
 private:
  void set_has_error_message();
  void clear_has_error_message();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_playlist_index();
  void clear_has_playlist_index();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 playlist_index_;
  friend struct ::protobuf_player_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlaybackControlRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:player_service.PlaybackControlRequest) */ {
 public:
  PlaybackControlRequest();
  virtual ~PlaybackControlRequest();

  PlaybackControlRequest(const PlaybackControlRequest& from);

  inline PlaybackControlRequest& operator=(const PlaybackControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlaybackControlRequest(PlaybackControlRequest&& from) noexcept
    : PlaybackControlRequest() {
    *this = ::std::move(from);
  }

  inline PlaybackControlRequest& operator=(PlaybackControlRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlaybackControlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaybackControlRequest* internal_default_instance() {
    return reinterpret_cast<const PlaybackControlRequest*>(
               &_PlaybackControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PlaybackControlRequest* other);
  friend void swap(PlaybackControlRequest& a, PlaybackControlRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlaybackControlRequest* New() const final {
    return CreateMaybeMessage<PlaybackControlRequest>(NULL);
  }

  PlaybackControlRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlaybackControlRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlaybackControlRequest& from);
  void MergeFrom(const PlaybackControlRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaybackControlRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PlaybackControlRequest_ControlType ControlType;
  static const ControlType PLAY =
    PlaybackControlRequest_ControlType_PLAY;
  static const ControlType STOP =
    PlaybackControlRequest_ControlType_STOP;
  static const ControlType PAUSE =
    PlaybackControlRequest_ControlType_PAUSE;
  static const ControlType VOLUME =
    PlaybackControlRequest_ControlType_VOLUME;
  static inline bool ControlType_IsValid(int value) {
    return PlaybackControlRequest_ControlType_IsValid(value);
  }
  static const ControlType ControlType_MIN =
    PlaybackControlRequest_ControlType_ControlType_MIN;
  static const ControlType ControlType_MAX =
    PlaybackControlRequest_ControlType_ControlType_MAX;
  static const int ControlType_ARRAYSIZE =
    PlaybackControlRequest_ControlType_ControlType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ControlType_descriptor() {
    return PlaybackControlRequest_ControlType_descriptor();
  }
  static inline const ::std::string& ControlType_Name(ControlType value) {
    return PlaybackControlRequest_ControlType_Name(value);
  }
  static inline bool ControlType_Parse(const ::std::string& name,
      ControlType* value) {
    return PlaybackControlRequest_ControlType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .player_service.PlaybackControlRequest.ControlType control_type = 1;
  bool has_control_type() const;
  void clear_control_type();
  static const int kControlTypeFieldNumber = 1;
  ::player_service::PlaybackControlRequest_ControlType control_type() const;
  void set_control_type(::player_service::PlaybackControlRequest_ControlType value);

  // optional int32 play_index = 2;
  bool has_play_index() const;
  void clear_play_index();
  static const int kPlayIndexFieldNumber = 2;
  ::google::protobuf::int32 play_index() const;
  void set_play_index(::google::protobuf::int32 value);

  // optional int32 volume_percent = 3;
  bool has_volume_percent() const;
  void clear_volume_percent();
  static const int kVolumePercentFieldNumber = 3;
  ::google::protobuf::int32 volume_percent() const;
  void set_volume_percent(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:player_service.PlaybackControlRequest)
 private:
  void set_has_control_type();
  void clear_has_control_type();
  void set_has_play_index();
  void clear_has_play_index();
  void set_has_volume_percent();
  void clear_has_volume_percent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int control_type_;
  ::google::protobuf::int32 play_index_;
  ::google::protobuf::int32 volume_percent_;
  friend struct ::protobuf_player_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlaybackControlResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:player_service.PlaybackControlResponse) */ {
 public:
  PlaybackControlResponse();
  virtual ~PlaybackControlResponse();

  PlaybackControlResponse(const PlaybackControlResponse& from);

  inline PlaybackControlResponse& operator=(const PlaybackControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlaybackControlResponse(PlaybackControlResponse&& from) noexcept
    : PlaybackControlResponse() {
    *this = ::std::move(from);
  }

  inline PlaybackControlResponse& operator=(PlaybackControlResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlaybackControlResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaybackControlResponse* internal_default_instance() {
    return reinterpret_cast<const PlaybackControlResponse*>(
               &_PlaybackControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(PlaybackControlResponse* other);
  friend void swap(PlaybackControlResponse& a, PlaybackControlResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlaybackControlResponse* New() const final {
    return CreateMaybeMessage<PlaybackControlResponse>(NULL);
  }

  PlaybackControlResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlaybackControlResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlaybackControlResponse& from);
  void MergeFrom(const PlaybackControlResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaybackControlResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string error_message = 1;
  bool has_error_message() const;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 1;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // required int32 error_code = 2;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:player_service.PlaybackControlResponse)
 private:
  void set_has_error_message();
  void clear_has_error_message();
  void set_has_error_code();
  void clear_has_error_code();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::google::protobuf::int32 error_code_;
  friend struct ::protobuf_player_5fservice_2eproto::TableStruct;
};
// ===================================================================

class PlayerService_Stub;

class PlayerService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline PlayerService() {};
 public:
  virtual ~PlayerService();

  typedef PlayerService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void PlayerProperties(::google::protobuf::RpcController* controller,
                       const ::player_service::PlayerPropertiesRequest* request,
                       ::player_service::PlayerPropertiesResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ResetPlaylist(::google::protobuf::RpcController* controller,
                       const ::player_service::ResetRequest* request,
                       ::player_service::ResetResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void PushToPlaylist(::google::protobuf::RpcController* controller,
                       const ::player_service::PushToPlaylistRequest* request,
                       ::player_service::PushToPlaylistResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void PlaybackControl(::google::protobuf::RpcController* controller,
                       const ::player_service::PlaybackControlRequest* request,
                       ::player_service::PlaybackControlResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PlayerService);
};

class PlayerService_Stub : public PlayerService {
 public:
  PlayerService_Stub(::google::protobuf::RpcChannel* channel);
  PlayerService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~PlayerService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements PlayerService ------------------------------------------

  void PlayerProperties(::google::protobuf::RpcController* controller,
                       const ::player_service::PlayerPropertiesRequest* request,
                       ::player_service::PlayerPropertiesResponse* response,
                       ::google::protobuf::Closure* done);
  void ResetPlaylist(::google::protobuf::RpcController* controller,
                       const ::player_service::ResetRequest* request,
                       ::player_service::ResetResponse* response,
                       ::google::protobuf::Closure* done);
  void PushToPlaylist(::google::protobuf::RpcController* controller,
                       const ::player_service::PushToPlaylistRequest* request,
                       ::player_service::PushToPlaylistResponse* response,
                       ::google::protobuf::Closure* done);
  void PlaybackControl(::google::protobuf::RpcController* controller,
                       const ::player_service::PlaybackControlRequest* request,
                       ::player_service::PlaybackControlResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PlayerService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerPropertiesRequest

// -------------------------------------------------------------------

// PlayerPropertiesResponse

// repeated string supported_file_types = 1;
inline int PlayerPropertiesResponse::supported_file_types_size() const {
  return supported_file_types_.size();
}
inline void PlayerPropertiesResponse::clear_supported_file_types() {
  supported_file_types_.Clear();
}
inline const ::std::string& PlayerPropertiesResponse::supported_file_types(int index) const {
  // @@protoc_insertion_point(field_get:player_service.PlayerPropertiesResponse.supported_file_types)
  return supported_file_types_.Get(index);
}
inline ::std::string* PlayerPropertiesResponse::mutable_supported_file_types(int index) {
  // @@protoc_insertion_point(field_mutable:player_service.PlayerPropertiesResponse.supported_file_types)
  return supported_file_types_.Mutable(index);
}
inline void PlayerPropertiesResponse::set_supported_file_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:player_service.PlayerPropertiesResponse.supported_file_types)
  supported_file_types_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PlayerPropertiesResponse::set_supported_file_types(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:player_service.PlayerPropertiesResponse.supported_file_types)
  supported_file_types_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PlayerPropertiesResponse::set_supported_file_types(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  supported_file_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:player_service.PlayerPropertiesResponse.supported_file_types)
}
inline void PlayerPropertiesResponse::set_supported_file_types(int index, const char* value, size_t size) {
  supported_file_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:player_service.PlayerPropertiesResponse.supported_file_types)
}
inline ::std::string* PlayerPropertiesResponse::add_supported_file_types() {
  // @@protoc_insertion_point(field_add_mutable:player_service.PlayerPropertiesResponse.supported_file_types)
  return supported_file_types_.Add();
}
inline void PlayerPropertiesResponse::add_supported_file_types(const ::std::string& value) {
  supported_file_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:player_service.PlayerPropertiesResponse.supported_file_types)
}
#if LANG_CXX11
inline void PlayerPropertiesResponse::add_supported_file_types(::std::string&& value) {
  supported_file_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:player_service.PlayerPropertiesResponse.supported_file_types)
}
#endif
inline void PlayerPropertiesResponse::add_supported_file_types(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  supported_file_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:player_service.PlayerPropertiesResponse.supported_file_types)
}
inline void PlayerPropertiesResponse::add_supported_file_types(const char* value, size_t size) {
  supported_file_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:player_service.PlayerPropertiesResponse.supported_file_types)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PlayerPropertiesResponse::supported_file_types() const {
  // @@protoc_insertion_point(field_list:player_service.PlayerPropertiesResponse.supported_file_types)
  return supported_file_types_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PlayerPropertiesResponse::mutable_supported_file_types() {
  // @@protoc_insertion_point(field_mutable_list:player_service.PlayerPropertiesResponse.supported_file_types)
  return &supported_file_types_;
}

// required string player_name = 2;
inline bool PlayerPropertiesResponse::has_player_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerPropertiesResponse::set_has_player_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerPropertiesResponse::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerPropertiesResponse::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_player_name();
}
inline const ::std::string& PlayerPropertiesResponse::player_name() const {
  // @@protoc_insertion_point(field_get:player_service.PlayerPropertiesResponse.player_name)
  return player_name_.GetNoArena();
}
inline void PlayerPropertiesResponse::set_player_name(const ::std::string& value) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:player_service.PlayerPropertiesResponse.player_name)
}
#if LANG_CXX11
inline void PlayerPropertiesResponse::set_player_name(::std::string&& value) {
  set_has_player_name();
  player_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:player_service.PlayerPropertiesResponse.player_name)
}
#endif
inline void PlayerPropertiesResponse::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:player_service.PlayerPropertiesResponse.player_name)
}
inline void PlayerPropertiesResponse::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:player_service.PlayerPropertiesResponse.player_name)
}
inline ::std::string* PlayerPropertiesResponse::mutable_player_name() {
  set_has_player_name();
  // @@protoc_insertion_point(field_mutable:player_service.PlayerPropertiesResponse.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerPropertiesResponse::release_player_name() {
  // @@protoc_insertion_point(field_release:player_service.PlayerPropertiesResponse.player_name)
  if (!has_player_name()) {
    return NULL;
  }
  clear_has_player_name();
  return player_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerPropertiesResponse::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    set_has_player_name();
  } else {
    clear_has_player_name();
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:player_service.PlayerPropertiesResponse.player_name)
}

// required string player_description = 3;
inline bool PlayerPropertiesResponse::has_player_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerPropertiesResponse::set_has_player_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerPropertiesResponse::clear_has_player_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerPropertiesResponse::clear_player_description() {
  player_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_player_description();
}
inline const ::std::string& PlayerPropertiesResponse::player_description() const {
  // @@protoc_insertion_point(field_get:player_service.PlayerPropertiesResponse.player_description)
  return player_description_.GetNoArena();
}
inline void PlayerPropertiesResponse::set_player_description(const ::std::string& value) {
  set_has_player_description();
  player_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:player_service.PlayerPropertiesResponse.player_description)
}
#if LANG_CXX11
inline void PlayerPropertiesResponse::set_player_description(::std::string&& value) {
  set_has_player_description();
  player_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:player_service.PlayerPropertiesResponse.player_description)
}
#endif
inline void PlayerPropertiesResponse::set_player_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_player_description();
  player_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:player_service.PlayerPropertiesResponse.player_description)
}
inline void PlayerPropertiesResponse::set_player_description(const char* value, size_t size) {
  set_has_player_description();
  player_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:player_service.PlayerPropertiesResponse.player_description)
}
inline ::std::string* PlayerPropertiesResponse::mutable_player_description() {
  set_has_player_description();
  // @@protoc_insertion_point(field_mutable:player_service.PlayerPropertiesResponse.player_description)
  return player_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerPropertiesResponse::release_player_description() {
  // @@protoc_insertion_point(field_release:player_service.PlayerPropertiesResponse.player_description)
  if (!has_player_description()) {
    return NULL;
  }
  clear_has_player_description();
  return player_description_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerPropertiesResponse::set_allocated_player_description(::std::string* player_description) {
  if (player_description != NULL) {
    set_has_player_description();
  } else {
    clear_has_player_description();
  }
  player_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_description);
  // @@protoc_insertion_point(field_set_allocated:player_service.PlayerPropertiesResponse.player_description)
}

// -------------------------------------------------------------------

// ResetRequest

// -------------------------------------------------------------------

// ResetResponse

// required string error_message = 1;
inline bool ResetResponse::has_error_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResetResponse::set_has_error_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResetResponse::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResetResponse::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
inline const ::std::string& ResetResponse::error_message() const {
  // @@protoc_insertion_point(field_get:player_service.ResetResponse.error_message)
  return error_message_.GetNoArena();
}
inline void ResetResponse::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:player_service.ResetResponse.error_message)
}
#if LANG_CXX11
inline void ResetResponse::set_error_message(::std::string&& value) {
  set_has_error_message();
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:player_service.ResetResponse.error_message)
}
#endif
inline void ResetResponse::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:player_service.ResetResponse.error_message)
}
inline void ResetResponse::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:player_service.ResetResponse.error_message)
}
inline ::std::string* ResetResponse::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:player_service.ResetResponse.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResetResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:player_service.ResetResponse.error_message)
  if (!has_error_message()) {
    return NULL;
  }
  clear_has_error_message();
  return error_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResetResponse::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:player_service.ResetResponse.error_message)
}

// required int32 error_code = 2;
inline bool ResetResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResetResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResetResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResetResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 ResetResponse::error_code() const {
  // @@protoc_insertion_point(field_get:player_service.ResetResponse.error_code)
  return error_code_;
}
inline void ResetResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:player_service.ResetResponse.error_code)
}

// -------------------------------------------------------------------

// PushToPlaylistRequest

// required string file_type = 1;
inline bool PushToPlaylistRequest::has_file_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushToPlaylistRequest::set_has_file_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushToPlaylistRequest::clear_has_file_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushToPlaylistRequest::clear_file_type() {
  file_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_type();
}
inline const ::std::string& PushToPlaylistRequest::file_type() const {
  // @@protoc_insertion_point(field_get:player_service.PushToPlaylistRequest.file_type)
  return file_type_.GetNoArena();
}
inline void PushToPlaylistRequest::set_file_type(const ::std::string& value) {
  set_has_file_type();
  file_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:player_service.PushToPlaylistRequest.file_type)
}
#if LANG_CXX11
inline void PushToPlaylistRequest::set_file_type(::std::string&& value) {
  set_has_file_type();
  file_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:player_service.PushToPlaylistRequest.file_type)
}
#endif
inline void PushToPlaylistRequest::set_file_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_type();
  file_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:player_service.PushToPlaylistRequest.file_type)
}
inline void PushToPlaylistRequest::set_file_type(const char* value, size_t size) {
  set_has_file_type();
  file_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:player_service.PushToPlaylistRequest.file_type)
}
inline ::std::string* PushToPlaylistRequest::mutable_file_type() {
  set_has_file_type();
  // @@protoc_insertion_point(field_mutable:player_service.PushToPlaylistRequest.file_type)
  return file_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PushToPlaylistRequest::release_file_type() {
  // @@protoc_insertion_point(field_release:player_service.PushToPlaylistRequest.file_type)
  if (!has_file_type()) {
    return NULL;
  }
  clear_has_file_type();
  return file_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushToPlaylistRequest::set_allocated_file_type(::std::string* file_type) {
  if (file_type != NULL) {
    set_has_file_type();
  } else {
    clear_has_file_type();
  }
  file_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_type);
  // @@protoc_insertion_point(field_set_allocated:player_service.PushToPlaylistRequest.file_type)
}

// required string original_path = 2;
inline bool PushToPlaylistRequest::has_original_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PushToPlaylistRequest::set_has_original_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PushToPlaylistRequest::clear_has_original_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PushToPlaylistRequest::clear_original_path() {
  original_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_original_path();
}
inline const ::std::string& PushToPlaylistRequest::original_path() const {
  // @@protoc_insertion_point(field_get:player_service.PushToPlaylistRequest.original_path)
  return original_path_.GetNoArena();
}
inline void PushToPlaylistRequest::set_original_path(const ::std::string& value) {
  set_has_original_path();
  original_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:player_service.PushToPlaylistRequest.original_path)
}
#if LANG_CXX11
inline void PushToPlaylistRequest::set_original_path(::std::string&& value) {
  set_has_original_path();
  original_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:player_service.PushToPlaylistRequest.original_path)
}
#endif
inline void PushToPlaylistRequest::set_original_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_original_path();
  original_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:player_service.PushToPlaylistRequest.original_path)
}
inline void PushToPlaylistRequest::set_original_path(const char* value, size_t size) {
  set_has_original_path();
  original_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:player_service.PushToPlaylistRequest.original_path)
}
inline ::std::string* PushToPlaylistRequest::mutable_original_path() {
  set_has_original_path();
  // @@protoc_insertion_point(field_mutable:player_service.PushToPlaylistRequest.original_path)
  return original_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PushToPlaylistRequest::release_original_path() {
  // @@protoc_insertion_point(field_release:player_service.PushToPlaylistRequest.original_path)
  if (!has_original_path()) {
    return NULL;
  }
  clear_has_original_path();
  return original_path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushToPlaylistRequest::set_allocated_original_path(::std::string* original_path) {
  if (original_path != NULL) {
    set_has_original_path();
  } else {
    clear_has_original_path();
  }
  original_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_path);
  // @@protoc_insertion_point(field_set_allocated:player_service.PushToPlaylistRequest.original_path)
}

// required int32 push_to_index = 3;
inline bool PushToPlaylistRequest::has_push_to_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PushToPlaylistRequest::set_has_push_to_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PushToPlaylistRequest::clear_has_push_to_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PushToPlaylistRequest::clear_push_to_index() {
  push_to_index_ = 0;
  clear_has_push_to_index();
}
inline ::google::protobuf::int32 PushToPlaylistRequest::push_to_index() const {
  // @@protoc_insertion_point(field_get:player_service.PushToPlaylistRequest.push_to_index)
  return push_to_index_;
}
inline void PushToPlaylistRequest::set_push_to_index(::google::protobuf::int32 value) {
  set_has_push_to_index();
  push_to_index_ = value;
  // @@protoc_insertion_point(field_set:player_service.PushToPlaylistRequest.push_to_index)
}

// required bytes file_data = 4;
inline bool PushToPlaylistRequest::has_file_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PushToPlaylistRequest::set_has_file_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PushToPlaylistRequest::clear_has_file_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PushToPlaylistRequest::clear_file_data() {
  file_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_data();
}
inline const ::std::string& PushToPlaylistRequest::file_data() const {
  // @@protoc_insertion_point(field_get:player_service.PushToPlaylistRequest.file_data)
  return file_data_.GetNoArena();
}
inline void PushToPlaylistRequest::set_file_data(const ::std::string& value) {
  set_has_file_data();
  file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:player_service.PushToPlaylistRequest.file_data)
}
#if LANG_CXX11
inline void PushToPlaylistRequest::set_file_data(::std::string&& value) {
  set_has_file_data();
  file_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:player_service.PushToPlaylistRequest.file_data)
}
#endif
inline void PushToPlaylistRequest::set_file_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_data();
  file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:player_service.PushToPlaylistRequest.file_data)
}
inline void PushToPlaylistRequest::set_file_data(const void* value, size_t size) {
  set_has_file_data();
  file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:player_service.PushToPlaylistRequest.file_data)
}
inline ::std::string* PushToPlaylistRequest::mutable_file_data() {
  set_has_file_data();
  // @@protoc_insertion_point(field_mutable:player_service.PushToPlaylistRequest.file_data)
  return file_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PushToPlaylistRequest::release_file_data() {
  // @@protoc_insertion_point(field_release:player_service.PushToPlaylistRequest.file_data)
  if (!has_file_data()) {
    return NULL;
  }
  clear_has_file_data();
  return file_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushToPlaylistRequest::set_allocated_file_data(::std::string* file_data) {
  if (file_data != NULL) {
    set_has_file_data();
  } else {
    clear_has_file_data();
  }
  file_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_data);
  // @@protoc_insertion_point(field_set_allocated:player_service.PushToPlaylistRequest.file_data)
}

// -------------------------------------------------------------------

// PushToPlaylistResponse

// required string error_message = 1;
inline bool PushToPlaylistResponse::has_error_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushToPlaylistResponse::set_has_error_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushToPlaylistResponse::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushToPlaylistResponse::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
inline const ::std::string& PushToPlaylistResponse::error_message() const {
  // @@protoc_insertion_point(field_get:player_service.PushToPlaylistResponse.error_message)
  return error_message_.GetNoArena();
}
inline void PushToPlaylistResponse::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:player_service.PushToPlaylistResponse.error_message)
}
#if LANG_CXX11
inline void PushToPlaylistResponse::set_error_message(::std::string&& value) {
  set_has_error_message();
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:player_service.PushToPlaylistResponse.error_message)
}
#endif
inline void PushToPlaylistResponse::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:player_service.PushToPlaylistResponse.error_message)
}
inline void PushToPlaylistResponse::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:player_service.PushToPlaylistResponse.error_message)
}
inline ::std::string* PushToPlaylistResponse::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:player_service.PushToPlaylistResponse.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PushToPlaylistResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:player_service.PushToPlaylistResponse.error_message)
  if (!has_error_message()) {
    return NULL;
  }
  clear_has_error_message();
  return error_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushToPlaylistResponse::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:player_service.PushToPlaylistResponse.error_message)
}

// required int32 error_code = 2;
inline bool PushToPlaylistResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PushToPlaylistResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PushToPlaylistResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PushToPlaylistResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 PushToPlaylistResponse::error_code() const {
  // @@protoc_insertion_point(field_get:player_service.PushToPlaylistResponse.error_code)
  return error_code_;
}
inline void PushToPlaylistResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:player_service.PushToPlaylistResponse.error_code)
}

// optional int32 playlist_index = 3;
inline bool PushToPlaylistResponse::has_playlist_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PushToPlaylistResponse::set_has_playlist_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PushToPlaylistResponse::clear_has_playlist_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PushToPlaylistResponse::clear_playlist_index() {
  playlist_index_ = 0;
  clear_has_playlist_index();
}
inline ::google::protobuf::int32 PushToPlaylistResponse::playlist_index() const {
  // @@protoc_insertion_point(field_get:player_service.PushToPlaylistResponse.playlist_index)
  return playlist_index_;
}
inline void PushToPlaylistResponse::set_playlist_index(::google::protobuf::int32 value) {
  set_has_playlist_index();
  playlist_index_ = value;
  // @@protoc_insertion_point(field_set:player_service.PushToPlaylistResponse.playlist_index)
}

// -------------------------------------------------------------------

// PlaybackControlRequest

// required .player_service.PlaybackControlRequest.ControlType control_type = 1;
inline bool PlaybackControlRequest::has_control_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlaybackControlRequest::set_has_control_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlaybackControlRequest::clear_has_control_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlaybackControlRequest::clear_control_type() {
  control_type_ = 0;
  clear_has_control_type();
}
inline ::player_service::PlaybackControlRequest_ControlType PlaybackControlRequest::control_type() const {
  // @@protoc_insertion_point(field_get:player_service.PlaybackControlRequest.control_type)
  return static_cast< ::player_service::PlaybackControlRequest_ControlType >(control_type_);
}
inline void PlaybackControlRequest::set_control_type(::player_service::PlaybackControlRequest_ControlType value) {
  assert(::player_service::PlaybackControlRequest_ControlType_IsValid(value));
  set_has_control_type();
  control_type_ = value;
  // @@protoc_insertion_point(field_set:player_service.PlaybackControlRequest.control_type)
}

// optional int32 play_index = 2;
inline bool PlaybackControlRequest::has_play_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlaybackControlRequest::set_has_play_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlaybackControlRequest::clear_has_play_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlaybackControlRequest::clear_play_index() {
  play_index_ = 0;
  clear_has_play_index();
}
inline ::google::protobuf::int32 PlaybackControlRequest::play_index() const {
  // @@protoc_insertion_point(field_get:player_service.PlaybackControlRequest.play_index)
  return play_index_;
}
inline void PlaybackControlRequest::set_play_index(::google::protobuf::int32 value) {
  set_has_play_index();
  play_index_ = value;
  // @@protoc_insertion_point(field_set:player_service.PlaybackControlRequest.play_index)
}

// optional int32 volume_percent = 3;
inline bool PlaybackControlRequest::has_volume_percent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlaybackControlRequest::set_has_volume_percent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlaybackControlRequest::clear_has_volume_percent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlaybackControlRequest::clear_volume_percent() {
  volume_percent_ = 0;
  clear_has_volume_percent();
}
inline ::google::protobuf::int32 PlaybackControlRequest::volume_percent() const {
  // @@protoc_insertion_point(field_get:player_service.PlaybackControlRequest.volume_percent)
  return volume_percent_;
}
inline void PlaybackControlRequest::set_volume_percent(::google::protobuf::int32 value) {
  set_has_volume_percent();
  volume_percent_ = value;
  // @@protoc_insertion_point(field_set:player_service.PlaybackControlRequest.volume_percent)
}

// -------------------------------------------------------------------

// PlaybackControlResponse

// required string error_message = 1;
inline bool PlaybackControlResponse::has_error_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlaybackControlResponse::set_has_error_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlaybackControlResponse::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlaybackControlResponse::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
inline const ::std::string& PlaybackControlResponse::error_message() const {
  // @@protoc_insertion_point(field_get:player_service.PlaybackControlResponse.error_message)
  return error_message_.GetNoArena();
}
inline void PlaybackControlResponse::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:player_service.PlaybackControlResponse.error_message)
}
#if LANG_CXX11
inline void PlaybackControlResponse::set_error_message(::std::string&& value) {
  set_has_error_message();
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:player_service.PlaybackControlResponse.error_message)
}
#endif
inline void PlaybackControlResponse::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:player_service.PlaybackControlResponse.error_message)
}
inline void PlaybackControlResponse::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:player_service.PlaybackControlResponse.error_message)
}
inline ::std::string* PlaybackControlResponse::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:player_service.PlaybackControlResponse.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlaybackControlResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:player_service.PlaybackControlResponse.error_message)
  if (!has_error_message()) {
    return NULL;
  }
  clear_has_error_message();
  return error_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaybackControlResponse::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:player_service.PlaybackControlResponse.error_message)
}

// required int32 error_code = 2;
inline bool PlaybackControlResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlaybackControlResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlaybackControlResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlaybackControlResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 PlaybackControlResponse::error_code() const {
  // @@protoc_insertion_point(field_get:player_service.PlaybackControlResponse.error_code)
  return error_code_;
}
inline void PlaybackControlResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:player_service.PlaybackControlResponse.error_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace player_service

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::player_service::PlaybackControlRequest_ControlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::player_service::PlaybackControlRequest_ControlType>() {
  return ::player_service::PlaybackControlRequest_ControlType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_player_5fservice_2eproto
